#! /usr/bin/env python3

# -*- coding: utf-8 -*-
# LICENSE
#
# This file is part of mss_record.
#
# If you use mss_record in any program or publication, please inform and
# acknowledge its author Stefan Mertl (stefan@mertl-research.at).
#
# mss_record is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
import configparser
import logging
import logging.handlers
import multiprocessing
import os
import signal
import sys
import threading
import traceback

import mss_record.core.recorder
import mss_record.version

class MultiProcessingLog(logging.Handler):
    def __init__(self, filename, maxBytes, backupCount):
        logging.Handler.__init__(self)

        self._handler = logging.handlers.RotatingFileHandler(filename,
                                                             maxBytes = maxBytes,
                                                             backupCount = backupCount)
        self.queue = multiprocessing.Queue(-1)

        t = threading.Thread(target=self.receive)
        t.daemon = True
        t.start()

    def setFormatter(self, fmt):
        logging.Handler.setFormatter(self, fmt)
        self._handler.setFormatter(fmt)

    def receive(self):
        while True:
            try:
                record = self.queue.get()
                self._handler.emit(record)
            except (KeyboardInterrupt, SystemExit):
                raise
            except EOFError:
                break
            except:
                traceback.print_exc(file=sys.stderr)

    def send(self, s):
        self.queue.put_nowait(s)

    def _format_record(self, record):
        # ensure that exc_info and args
        # have been stringified.  Removes any chance of
        # unpickleable things inside and possibly reduces
        # message size sent over the pipe
        if record.args:
            record.msg = record.msg % record.args
            record.args = None
        if record.exc_info:
            dummy = self.format(record)
            record.exc_info = None

        return record

    def emit(self, record):
        try:
            s = self._format_record(record)
            self.send(s)
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)

    def close(self):
        self._handler.close()
        logging.Handler.close(self)



def get_logger_handler(filename):
    ''' Create a logging format handler.
    '''
    ch = MultiProcessingLog(filename, maxBytes = 1000000, backupCount = 10)
    formatter = logging.Formatter("#LOG# - %(asctime)s - %(process)d - %(threadName)s - %(levelname)s - %(name)s: %(message)s")
    ch.setFormatter(formatter)

    return ch


def load_configuration(filename):
    ''' Load the configuration from a file.
    '''
    parser = configparser.ConfigParser()
    parser.read(filename)

    config = {}
    config['log'] = {}
    config['log']['dir'] = parser.get('log', 'log_dir').strip()
    config['log']['filename'] = parser.get('log', 'log_filename').strip()
    config['log']['level'] = parser.get('log', 'log_level').strip()

    config['station'] = {}
    config['station']['network'] = parser.get('station', 'network').strip()
    config['station']['station_code'] = parser.get('station', 'station_code').strip()
    config['station']['location'] = parser.get('station', 'location').strip()

    return config


if __name__ == '__main__':
    def signal_handler(signum, frame):
        if signum == signal.SIGINT:
            logger.info("Stopping the recorder.")
            recorder.stop()
            logger.info('Exiting program.')
            sys.exit(0)
        else:
            logger.info("Got unintended signal: %d.")

    # Handle signals.
    signal.signal(signal.SIGINT, signal_handler)

    # Specify the configuration file using argpars.
    parser = argparse.ArgumentParser(description = 'mss_record')

    parser.add_argument('config_file', help = 'The path to the configuration file.',
                        type = str)
    args = parser.parse_args()

    # Read the INI formatted configuration file using configparser.
    config = load_configuration(args.config_file)

    # Setup a rotating file logger.
    log_filename = os.path.join(config['log']['dir'], config['log']['filename'])
    if not os.path.exists(config['log']['dir']):
        os.makedirs(config['log']['dir'])
    logger = logging.getLogger('mss_record')
    logger.setLevel(config['log']['level'])
    logger.addHandler(get_logger_handler(log_filename))

    logger.info("mss_record version %s", mss_record.__version__)
    logger.info("mss_record git_version: %s", mss_record.version.__git_version__)
    logger.info("Starting mss record with configuration: %s.", config)


    # Create the recorder instance.
    recorder = mss_record.core.recorder.Recorder(network = config['station']['network'],
                                        station = config['station']['station_code'],
                                        location = config['station']['location'])

    # Check the system.
    working_servers = recorder.check_ntp()
    if not working_servers:
        logger.error("No working NTP servers found, exiting.")
        sys.exit()

    # - access to destination folder for miniseed files
    # - internet connection

    # Interrupt response handler f√ºr die ADC erstellen.
    # Die ADCs mit 860 sps laufen lassen.
    # Eine schnelle I2C clock verwenden.

    # Zeitdauer testen 

    recorder.run()

    while True:
        signal.pause()




